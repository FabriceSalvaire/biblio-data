#! /usr/bin/env python3
# -*- Python -*-

####################################################################################################
#
# Babel - A Bibliography Manager
# Copyright (C) 2018 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################
#
# Lexique v3 has 142 685 words (+ 8)
#
####################################################################################################

####################################################################################################

import argparse
import sys

from Babel.Config import ConfigInstall
from Babel.Corpus import tag_registry
from Babel.DataBase.CorpusDataBase import CorpusSqliteDataBase

####################################################################################################

argument_parser = argparse.ArgumentParser(description='Make French lexique.org database.')

args = argument_parser.parse_args()

####################################################################################################

sqlite_path = ConfigInstall.Corpus.sqlite_path
database = CorpusSqliteDataBase(sqlite_path)
fr_tags = tag_registry['fr']

####################################################################################################

# FIELDS = (
#     'ortho', # le mot
#     'phon', # les formes phonologiques du mot
#     'lemme', # les lemmes de ce mot
#     'cgram', # les catégories grammaticales de ce mot
#     'genre', # le genre
#     'nombre', # le nombre
#     'freqlemfilms', # la fréquence du lemme selon le corpus de sous-titres (par million d’occurrences)
#     'freqlemlivres', # la fréquence du lemme selon le corpus de livres (par million d’occurrences)
#     'freqfilms', # la fréquence du mot selon le corpus de sous-titres (par million d’occurrences)
#     'freqlivres', # la fréquence du mot selon le corpus de livres (par million d’occurrences)
#     'infover', # modes, temps, et personnes possibles pour les verbes
#     'nbhomogr', # nombre d'homographes
#     'nbhomoph', # nombre d'homophones
#     'islem', # indique si c'est un lemme ou pas
#     'nblettres', # le nombre de lettres
#     'nbphons', # nombre de phonèmes
#     'cvcv', # la structure orthographique
#     'p-cvcv', # la structure phonologique
#     'voisorth', # nombre de voisins orthographiques
#     'voisphon', # nombre de voisins phonologiques
#     'puorth', # point d'unicité orthographique
#     'puphon', # point d'unicité phonologique
#     'syll', # forme phonologique syllabée
#     'nbsyll', # nombre de syllabes
#     'cv-cv ', # structure phonologique syllabée
#     'orthrenv', # forme orthograhique inversée
#     'phonrenv', # forme phonologique inversée
#     'orthosyll', # forme orthographique syllabée
# )

FIELDS = (
   'ortho',
   'phon',
   'lemme',
   'cgram',
   'genre',
   'nombre',
   'freqlemfilms2',
   'freqlemlivres',
   'freqfilms2',
   'freqlivres',
   'infover',
   'nbhomogr',
   'nbhomoph',
   'islem',
   'nblettres',
   'nbphons',
   'cvcv',
   'p_cvcv',
   'voisorth',
   'voisphon',
   'puorth',
   'puphon',
   'syll',
   'nbsyll',
   'cv-cv',
   'orthrenv',
   'phonrenv',
   'orthosyll',
   'cgramortho',
   'deflem',
   'defobs',
   'old20',
   'pld20',
   'morphoder',
   'nbmorph',
)

# Empty cgram
#
# {'ortho': 'o', 'phon': 'o', 'lemme': 'o', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.02}
# {'ortho': 'team', 'phon': 'tim', 'lemme': 'team', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.06}
# {'ortho': 'à brûle-pourpoint', 'phon': 'abRylpuRpw5', 'lemme': 'à brûle-pourpoint', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.28}
# {'ortho': 'à cloche-pied', 'phon': 'aklOSpje', 'lemme': 'à cloche-pied', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.44}
# {'ortho': 'à rebrousse-poil', 'phon': 'aR°bRuspwal', 'lemme': 'à rebrousse-poil', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.16}
# {'ortho': 'à tire-larigot', 'phon': 'atiRlaRigo', 'lemme': 'à tire-larigot', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.34}
# {'ortho': 'à touche-touche', 'phon': 'atuStuS', 'lemme': 'à touche-touche', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 0.02}
# {'ortho': 'à tue-tête', 'phon': 'atytEt', 'lemme': 'à tue-tête', 'cgram': '', 'genre': '', 'nombre': '', 'freq': 1.08}

####################################################################################################

class Word:

    ##############################################

    def __init__(self, word_entry):

        for key in ('ortho', 'phon', 'lemme', 'genre', 'nombre'):
            setattr(self, key, getattr(word_entry, key))

        self.tags = set((word_entry.cgram,))
        self.freq = sum([float(value) for value in (word_entry.freqfilms2, word_entry.freqlivres)])
        self.freq *= 1e6
        self.rank = 0

    ##############################################

    def merge(self, word):

        self.tags |= word.tags
        self.freq += word.freq

    ##############################################

    def round_freq(self):
        self.freq = int(round(self.freq))

    ##############################################

    @property
    def tags_int(self):
        return fr_tags.encode_tags(self.tags)

    ##############################################

    def __repr__(self):
        return '{0.ortho} | {0.rank} | {0.freq} | {0.tags}'.format(self) # {0.pos_int}

####################################################################################################

class WordEntry:

    grammatical_category = set()

    ##############################################

    def __init__(self, line):

        fields = line.split('\t')
        for i, value in enumerate(fields):
            setattr(self, FIELDS[i], value)

        if self.cgram:
            self.grammatical_category.add(self.cgram)

    ##############################################

    def to_word(self):
        return Word(self)

####################################################################################################

words = {}

print('Read words ...')
word_counter = 0
with sys.stdin as file_input:
    for i, line in enumerate(file_input):
        if i == 0:
            continue
        word_entry = WordEntry(line)
        word_counter += 1
        if not word_entry.cgram:
            print(word_entry.ortho)
        else:
            word = word_entry.to_word()
            if word.ortho in words:
                words[word.ortho].merge(word)
            else:
                words[word.ortho] = word
print('Number of words {}'.format(word_counter))

# if set(POS) != WordEntry.grammatical_category:
#     print('POS mismatch:', grammatical_category - set(POS), set(POS) - grammatical_category)

print('Rank words ...')
for word in words.values():
    word.round_freq()
ranked_words = sorted(words.values(), key=lambda word: word.freq, reverse=True)
for i, word in enumerate(ranked_words):
    word.rank = i + 1
    # if len(word.pos) > 1:
    #  print(word)

####################################################################################################

print('Store {} words ...'.format(len(ranked_words)))
word_table = database.corpus_fr_table
for word in ranked_words:
    try:
        lemma_id = words[word.lemme].rank
    except KeyError:
        lemma_id = 0
    print(repr(word), '>>>', lemma_id)
    word_table.add_new_row(
        word=word.ortho,
        tags1=word.tags_int,
        rank=word.rank,
        frequency=word.freq,
        lemma_id=lemma_id,
    )
print('commit table')
word_table.commit()
print('commit done')

print('Number of ranked words {}'.format(len(ranked_words)))

